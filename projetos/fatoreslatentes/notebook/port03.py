# -*- coding: utf-8 -*-
"""Port03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TbHzKkgcjhB_ikP9HzcetaOnhs2WPWE-

### **Análise Exploratória Inicial**
"""

# Imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

# Carregar o dataset
df=pd.read_csv('airline_passenger_satisfaction.csv')
df.head()

# Verificar colunas e tipos de dados
df.info()

# Verificar valores ausentes
df.isnull().sum()

df.shape

"""Durante a etapa inicial de exploração do conjunto de dados, foram realizadas as seguintes observações:

- O dataset possui **25 colunas**.
- A coluna `Arrival Delay in Minutes` apresenta **310 registros ausentes**, o que representa menos de 0,3% do total de registros. Considerando o volume de dados (>100.000 registros), foi decidido que esses registros seriam removidos, já que a eliminação não compromete a representatividade do conjunto.
- As seguintes colunas foram identificadas como **não quantitativas** e, portanto, não serão incluídas na Análise de Componentes Principais (PCA):
  - `Gender`
  - `Customer Type`
  - `Type of travel`
  - `Class`
  - `satisfaction`

A análise demonstrou que, excetuando a coluna `Arrival Delay in Minutes`, **não há presença significativa de valores ausentes** no restante do dataset.  
Além disso, foi constatado que existe um número suficiente de variáveis quantitativas relevantes para que o PCA seja aplicado de forma significativa.

Com estas observações, foi possível definir o plano de preparação e limpeza dos dados para a aplicação do PCA.

### **Preparação dos Dados para PCA**
"""

# Remover registors com valores ausentes
df = df.dropna()

# Confirmar que não temos mais valores ausentes
df.isnull().sum()

# Remover colunas não quantitativas
cols_drop = ['Gender', 'Customer Type', 'Type of Travel', 'Class', 'satisfaction', 'Unnamed: 0', 'id']

df = df.drop(cols_drop, axis=1)
df.head()

# Inicializar o scaler
scaler = StandardScaler()

# Ajustar e transformar os dados
df_scaled = pd.DataFrame(scaler.fit_transform(df))

# Retornar os nomes originais das colunas
df_scaled.columns = df.columns
df_scaled.head()

"""Após a análise exploratória, foi realizada a preparação dos dados para a aplicação do PCA, contemplando as seguintes etapas:

- **Escalonamento dos dados**: foi aplicada a técnica de **StandardScaler**, garantindo que todas as variáveis quantitativas estejam na mesma escala e, portanto, possam ser comparadas de maneira apropriada no contexto do PCA.
- **Tratamento de valores ausentes**: a coluna `Arrival Delay in Minutes`, que apresentava registros nulos, teve esses registros removidos, por baixa representividade.
- **Conversão para DataFrame**: os dados escalonados foram convertidos novamente em um DataFrame Pandas, preservando os nomes originais das colunas quantitativas para facilitar a interpretação dos componentes principais.

Com a finalização desta etapa, os dados encontram-se devidamente preparados e prontos para a aplicação do PCA, assegurando que a técnica possa capturar de forma adequada as **estruturas latentes** e as **relações entre variáveis** que influenciam a satisfação dos clientes no contexto da companhia aérea.

### **Aplicação do PCA + Scree Plot**
"""

# Instanciando o PCA
pca = PCA()
pca.fit(df_scaled)

# Variância explicada por componente
exp_variance = pca.explained_variance_ratio_

# Plot - Scree Plot
plt.figure(figsize=(10, 6))
plt.plot(np.cumsum(exp_variance), marker='o', linestyle='--', color='g')
plt.xlabel('Número de Componentes Principais')
plt.ylabel('Variância Explicada Acumulada')
plt.title('Scree Plot - Variância Explicada pelos Componentes Principais')
plt.grid(True)
plt.show()

# Exibir variância explicada por componente
for i, var in enumerate(exp_variance):
    print(f"Componente Principal {i+1}: {100*var:.2f}%")

"""Após a aplicação do PCA, foi gerado o **Scree Plot** que demonstra a proporção da variância explicada por cada componente principal.

- **Número de componentes relevantes**: a partir da análise visual do gráfico, observou-se que aproximadamente **15 componentes** são suficientes para explicar cerca de **84% da variância total** da base de dados, um resultado robusto para datasets com múltiplas variáveis.
  
- **Ponto de inflexão**: a curva de variância acumulada não apresentou um ponto de inflexão claro (cotovelo bem definido), indicando que a redução da variância explicada por componente ocorre de forma gradual.

- **Comportamento geral da curva**: o padrão da curva sugere a presença de **alta correlação entre as variáveis** originais, refletindo uma estrutura latente subjacente que o PCA consegue capturar e resumir eficientemente.

Este resultado fornece um excelente ponto de partida para as próximas etapas de interpretação dos componentes e análise dos fatores latentes que influenciam as decisões de compra dos clientes.

"""

# Aplicação PCA com número de componentes definido (15)
pca_n = PCA(n_components=15)
pca_n.fit(df_scaled)
components = pca_n.components_

# Criar datafram com as cargas dos componentes
loadings_df = pd.DataFrame(components.T,
                           columns=[f"PC{i+1}" for i in range(15)],
                           index=df_scaled.columns)

# Visualizar as primeiras linhas da matriz de carga
loadings_df

"""Após a aplicação do PCA com 15 componentes, foi gerada a matriz de carga para interpretar como cada variável original influencia os fatores latentes (componentes principais).

- **PC1**: As variáveis com maior carga absoluta foram **Inflight entertainment**, **Cleanliness**, e **Seat comfort**. Este componente parece capturar um fator relacionado ao **conforto geral e qualidade da experiência a bordo**.

- **PC2**: As variáveis com maior carga foram **Ease of Online booking**, **Inflight wifi service**, **Gate location**, e **Departure/Arrival time convenient**. Este componente aparenta representar um fator associado a **serviços de conveniência e eficiência logística**, incluindo a **experiência digital** no processo de viagem.

- **Interpretação geral**: A análise sugere que os fatores latentes identificados refletem duas dimensões principais da experiência do cliente: **conforto durante o voo** e **comodidade e experiência no processo de compra e viagem**.

Esta etapa é crucial para entender como as variáveis observáveis se agrupam em conceitos latentes que influenciam a **decisão de satisfação e escolha de companhias aéreas** pelos clientes.

### **Aplicar KMeans nos componentes**
"""

# Reduzindo para 4 componentes
pca_4 = PCA(n_components=4)
df_pca_4 = pca_4.fit_transform(df_scaled)

# Testar K de 2 a 10
inertia = []
silhouette = []

for k in range(2, 11):
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(df_pca_4)
    inertia.append(kmeans.inertia_)
    silhouette.append(silhouette_score(df_pca_4, kmeans.labels_))
    print('k número: ', k)

# Plot do método do cotovelo
plt.figure(figsize=(12,5))

plt.subplot(1,2,1)
plt.plot(range(2, 11), inertia, marker='o')
plt.title('Método do Cotovelo')
plt.xlabel('Número de Clusters')
plt.ylabel('Inércia')

plt.subplot(1,2,2)
plt.plot(range(2, 11), silhouette, marker='o', color='green')
plt.title('Coeficiente de Silhouette')
plt.xlabel('Número de Clusters')
plt.ylabel('Silhouette Score')

plt.tight_layout()
plt.show()

"""Após aplicar uma redução de dimensionalidade via PCA com 4 componentes e realizar a clusterização com KMeans, foi utilizado o método do cotovelo e o coeficiente de silhouette para identificar o número ideal de clusters.

**Conclusões da Análise:**

- **Número de clusters sugerido**: A partir de 5 clusters, o método do cotovelo indicou um ponto de inflexão na curva de inércia, sugerindo que 5 clusters seria uma boa escolha.
- **Confirmação pelo silhouette**: O valor do coeficiente de silhouette confirmou essa escolha, apresentando seu ponto mais alto justamente em 5 clusters, validando a segmentação como consistente.
- **Aplicação para o negócio**: A segmentação obtida poderá trazer insights valiosos para a companhia aérea, pois possibilita agrupar clientes com perfis semelhantes. Isso abre espaço para campanhas de marketing mais personalizadas, melhorias de serviço direcionadas e ofertas específicas para diferentes grupos de clientes.
"""

# Aplicar KMeans final
kmeans_final = KMeans(n_clusters=5, random_state=42)
clusters_final = kmeans_final.fit_predict(df_pca_4)

# Adicionar os clusters ao DataFrame reduzido para visualização
df_pca = pd.DataFrame(df_pca_4, columns=['PC1', 'PC2', 'PC3', 'PC4'])
df_pca['Cluster'] = clusters_final

# Visualização 2D dos clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df_pca, x='PC1', y='PC2', hue='Cluster', palette='Set1', alpha=0.7, s=60)
plt.title('Clusters de Clientes (PCA - 2 Componentes)')
plt.xlabel('Componente Principal 1')
plt.ylabel('Componente Principal 2')
plt.legend(title='Cluster')
plt.grid(True)
plt.show()

"""## Análise Final da Segmentação de Clusters

Após a aplicação da técnica de **K-Means Clustering**, obtivemos uma segmentação da base de clientes da companhia aérea. A análise visual dos clusters revelou os seguintes pontos:

- **Separação dos clusters:** Alguns clusters apresentam uma separação mais clara (por exemplo, os grupos **azul** e **roxo**), enquanto outros (como **amarelo**, **vermelho** e **verde**) apresentam maior sobreposição. Isso indica que, embora exista uma segmentação perceptível, há grupos com perfis mais mistos.

- **Características marcantes:**
  - O **cluster azul** demonstra uma tendência mais forte em relação ao componente principal **PC1**, associado a fatores como **conforto no voo**.
  - O **cluster roxo** apresenta maior dispersão em relação ao **PC2**, que reflete aspectos relacionados a **serviços digitais e conveniência**.

- **Aplicações práticas para a companhia aérea:**
  - **Cluster azul:** Pode ser alvo de campanhas de **upgrades de assento**, programas de fidelização para passageiros que valorizam conforto e qualidade do serviço de bordo.
  - **Cluster roxo:** Estratégias focadas em **melhorar a experiência digital**, como ofertas de conectividade a bordo, serviços personalizados via app e programas de engajamento online.
  - **Clusters mistos:** Demandam uma análise complementar, cruzando com outras informações (como demografia ou frequência de viagem), para possibilitar ofertas mais direcionadas.

### Conclusão

Embora a separação dos clusters não seja perfeita, o modelo de segmentação oferece insights valiosos que podem ajudar a companhia aérea a personalizar suas ofertas e **desenvolver estratégias de marketing mais eficazes**. Com isso, a empresa pode otimizar tanto a experiência do cliente quanto seus resultados comerciais.

"""